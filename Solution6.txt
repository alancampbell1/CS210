Lab 6 Solutions

Problem Statement

In this task the input is two numbers, followed by a series of strings. Those strings must be sorted and then one particular string must be outputted. The first number denotes the quantity of strings to follow. The second number indicates which string should be outputted following the sort. For example, if it's a 3, then output the string that falls in third place. If it's a 5 then output the string that falls in fifth place.

 

The sorting that should be applied is as follows: sort words by their length, with the shortest words coming first. If two words have the same length, then sort them in reverse alphabetical order (i.e. with "zoo" coming ahead of "ape").

 

NOTE: You should implement the sorting algorithm yourself, DO NOT use Arrays.sort.

 

Input Format

The first line is an int n indicating the quantity of strings

The second line is an int r indicating the ranking to be outputted following the sort

This is followed by n Strings each on a separate line

 

Output Format

Output the string ranked in rth place following the sort

 

Constraints

1≤n≤1000

 

Sample Input

6

3

this

is

how

to

do

it

 

Sample Output

is

 

Explanation

When sorted the words are

to

it

is

do

how

this

 

The 3rd words in the list is "is"

 

 

 

 

 

import java.util.*;   (courtesty of Michael Sheridan)

 

public class Solution{

    public static void main (String[]args){

        Scanner scan = new Scanner (System.in);

        int n = scan.nextInt();         //read n

        int r = scan.nextInt();         //read r

        scan.nextLine();

        String[]strings = new String[n];            //read strings

        for(int i = 0; i<strings.length; i++){

            strings[i]= scan.nextLine();

        }

        sort(strings);                              //sort strings

        System.out.println(strings[r-1]);           //print strings

    }

   

    public static void sort (String[]strings){

        for(int j = 0; j < strings.length - 1; j++){

            int min = j;

            for(int i = j + 1; i < strings.length; i++){        //find min

                if(compare(strings[i], strings[min])<0){

                    min = i;

                }

            }

            if(min != j){                                       //Swap if need to

                String temp = strings[min];

                strings[min] = strings[j];

                strings[j] = temp;

            }

        }

    }

   

    public static int compare (String s1, String s2){           //compare strings

        int compare = s1.length() - s2.length();                //compare length

        if(compare==0){                                    //if its the same, compare by reverse alphabetically

            compare = s2.compareTo(s1);

        }

        return compare;

    }

}

 

 

Problem Statement

The goal is to read in a list of students and their exam scores into an array, sort the class by their exam scores, and output the name of the student with a particular ranking.

 

NOTE: You should implement the sorting algorithm yourself, DO NOT use Arrays.sort

TIP: To avoid issues with a scanner when reading a line after reading a number, you can read in the number using Integer.parseInt(scan.nextLine()) where scan in the name of the Scanner you are using.

 

Input Format

The first line contains n, the number of students. The second line contains r, the ranking to output. This is followed by n pairs of student names and exam scores, each on a separate line.

 

Output Format

The name of the student who came in rth rank in the class.

 

Constraints

0≤n≤100

 

Sample Input

5

2
Eoin

18
Claire

94
David

34
Dylan

69
John

25

 

Sample Output

Dylan

 

Explanation

When sorted by exam scores, the class looks like

94: Claire
69: Dylan
34: David
25: John
18: Eoin

 

"Dylan" is ranked 2nd.

 

import java.util.*; (courtesty of Manyiu Lam)

 

public class Solution {

    public static void main(String args[] ){

        Scanner in = new Scanner(System.in);

        int n = Integer.parseInt(in.nextLine()), rank = Integer.parseInt(in.nextLine());

        String[] b = new String[n];

        int[] a = new int[n];

 

        for(int i = 0; i < n; i++) {

            b[i] = in.nextLine();

            a[i] = Integer.parseInt(in.nextLine());

        }

   

        insertion(a, b);

 

        System.out.println(b[n-rank]);

    }

   

    public static void insertion(int[] a, String[] b) {

        for(int i = 0; i < a.length-1; i++) {

            for(int j = i+1; j < a.length; j++) {

                if(a[i] > a[j]) {

                    swap(i, j, a);

                    swap(i, j, b);

                }

            }

        }

    }

   

    public static void swap(int x, int y, int[] a) {

        int temp = a[x];

        a[x] = a[y];

        a[y] = temp;

    }

   

    public static void swap(int x, int y, String[] a) {

        String temp = a[x];

        a[x] = a[y];

        a[y] = temp;  

    }

   

}

